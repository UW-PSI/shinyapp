[{"name": "app.py", "content": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom shiny import App, reactive, render, ui\nfrom functools import lru_cache\n\ntry:\n    # This will succeed only in the browser (Pyodide)\n    from shinylive import open_url\n    IN_BROWSER = True\nexcept ImportError:\n    IN_BROWSER = False\n\ndef read_csv_url(url, **kwargs):\n    \"\"\"\n    Load a CSV either locally or in the browser via Pyodide.\n    \"\"\"\n    if IN_BROWSER:\n        # Use Pyodide-friendly open_url\n        with open_url(url) as f:\n            return pd.read_csv(f, **kwargs)\n    else:\n        # Normal local read\n        return pd.read_csv(url, **kwargs)\n\n# Hydrologic Timeseries\nriver_files = {\n    \"Pullayup\": \"https://uw-psi.github.io/shinyapp/data/Pullayup.csv\",\n    \"Snohomish\": \"https://uw-psi.github.io/shinyapp/data/Snohomish.csv\",\n    \"Green\": \"https://uw-psi.github.io/shinyapp/data/Green.csv\",\n    \"Samish\": \"https://uw-psi.github.io/shinyapp/data/Sammish.csv\",\n    \"Stillaguamish\": \"https://uw-psi.github.io/shinyapp/data/Stillaguamish.csv\",\n    \"Hoko\": \"https://uw-psi.github.io/shinyapp/data/Hoko.csv\",\n    \"Elwha\": \"https://uw-psi.github.io/shinyapp/data/Elwha.csv\",\n    \"Deschutes\": \"https://uw-psi.github.io/shinyapp/data/Deschutes.csv\",\n}\nsample_df = read_csv_url(river_files[\"Pullayup\"])\nhydro_variable_options = [col for col in sample_df.columns if col not in (\"Year\", \"Day\", \"Loop\", \"Step\")]\n#velma datasets\nvelma_files = {\n    \"flow2011\": \"https://uw-psi.github.io/shinyapp/data/velma_monthly_flow_stats_2011.csv\",\n    \"totC2011\": \"https://uw-psi.github.io/shinyapp/data/velma_monthly_C_stats_2011.csv\"\n    # \"temp2011\": \"https://uw-psi.github.io/shinyapp/data/velma_monthly_temp_stats_2011.csv\",\n    # \"totN2011\": \"https://uw-psi.github.io/shinyapp/data/velma_monthly_totN_stats_2011.csv\",\n\n}\n# Landcover Change Datasets\nlcc_data = {\n    'counties': \"https://uw-psi.github.io/shinyapp/data/diffed_counties.csv\",\n    'wrias': \"https://uw-psi.github.io/shinyapp/data/diffed_wrias.csv\",\n    'velma': \"https://uw-psi.github.io/shinyapp/data/diffed_velma.csv\"\n}\nregion_type_options = [\"County\", \"WRIA\", \"VELMA watershed\"]\n\nland_cover_colors = {\n    \"Open Space\": \"#FFBEBE\",\n    \"Low Intensity\": \"#FF7F7F\",\n    \"Medium Intensity\": \"#E60000\",\n    \"High Intensity\": \"#730000\",\n    \"Forest\": \"#267300\",\n    \"Agriculture\": \"#FFEBAF\"\n}\n\n#cache datasets to avoid redownloading\n@lru_cache\ndef load_lcc_dataset(name):\n    return read_csv_url(lcc_data[name])\n\n#####edit here (1 and 2) if you need to make new drop down labels ######\n#1) load data\ndf_counties = load_lcc_dataset(\"counties\")\ndf_wrias = load_lcc_dataset(\"wrias\")\ndf_velma = load_lcc_dataset(\"velma\")\n#2) get unique region names for dropdowns\ncounty_list = df_counties[\"Feature_Name\"].unique().tolist()\nwria_list = df_wrias[\"Feature_Name\"].unique().tolist()\nvelma_list = df_velma[\"Feature_Name\"].unique().tolist()\n\n######################## UI #########################\n# The UI section defines the app\u2019s layout and interactive elements.\n# Each tab corresponds to a different visualization dashboard.\n\napp_ui = ui.page_fluid(\n    ui.h2(\"PSIMF Dashboard\"),\n    #------ landcover dashboard tab ------\n    ui.navset_tab(\n        ui.nav_panel(\n            \"Landcover Dashboard\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_radio_buttons(\"region_type\", \"Select Region Type\", choices=[\"County\", \"WRIA\", 'VELMA watershed']),\n                    ui.output_ui(\"region_selector\")\n                ),\n                ui.navset_card_tab(\n                    ui.nav_panel(\n                        \"Difference\",\n                        ui.output_plot(\"plot_lcc\", height=\"400px\")\n                    ),\n                    ui.nav_panel(\n                        \"Total Area\",\n                        ui.output_plot(\"plot_lcc_area\", height=\"400px\")\n                    )\n                )\n            )\n        ),\n        #----------------\n\n        #------ VELMA Monthly Explorer tab ------\n        ui.nav_panel(\n            \"VELMA Monthly Explorer\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_radio_buttons(\n                        \"velma_var\",\n                        \"Select Variable\",\n                        choices={\n                            \"flow2011\": \"Flow\",\n                            \"temp2011\": \"Temperature\",\n                            \"totN2011\": \"Total Nitrogen\",\n                            \"totC2011\": \"Total Carbon\"\n                        }\n                    ),\n                    ui.input_select(\"velma_watershed\", \"Select Watershed\", choices=read_csv_url(velma_files[\"flow2011\"])[\"Watershed\"].unique().tolist())\n                ),\n                ui.layout_columns(\n                    ui.card(\n                        ui.card_header(\"Monthly Min/Max/Mean Timeseries\"),\n                        ui.output_plot(\"velma_monthly_plot\", height=\"500px\"),\n                    )\n                )\n            )\n        ),\n        #----------------\n        #------ Hydrologic Explorer tab ------\n        ui.nav_panel(\n            \"Hydrologic Explorer\",\n            ui.layout_sidebar(\n                ui.sidebar(\n                    ui.input_select(\"river\", \"Select River Mouth\", choices=list(river_files.keys())),\n                    ui.input_select(\"variable\", \"Select Variable\", choices=hydro_variable_options),\n                ),\n                ui.layout_columns(\n                    ui.card(\n                        ui.card_header(\"Timeseries Summary\"),\n                        ui.output_plot(\"timeseries_plot\", height=\"500px\"),\n                    )\n                )\n            )\n        ),\n        #----------------\n        #------ Embedded Visuals ------\n        ui.nav_panel(\n            \"VELMA SSM Visual\",\n            ui.tags.iframe(\n                src=\"https://uw-psi.github.io/visuals/velma_ssm(2).html\",\n                width=\"100%\",\n                height=\"600\",\n                style=\"border:none;\"\n            )\n        ),\n        ui.nav_panel(\n            \"LCC\",\n            ui.tags.iframe(\n                src=\"https://uw-psi.github.io/visuals/landcover_change.html\",\n                width=\"100%\",\n                height=\"600\",\n                style=\"border:none;\"\n            )   \n        )\n    ) \n)\n ######################### Server #########################\n # The server function defines all reactive computations and plots that respond to user input in the UI.\ndef server(input, output, session):\n    ### landcover dashboard fuctions ###\n    @render.ui\n    def region_selector():\n        if input.region_type() == \"County\":\n            return ui.input_select(\"region_name\", \"Select County\", choices=county_list)\n        elif input.region_type() == \"VELMA watershed\":\n            return ui.input_select(\"region_name\", \"Select VELMA watershed\", choices=velma_list)\n        else:\n            return ui.input_select(\"region_name\", \"Select WRIA\", choices=wria_list)\n\n    def make_velma_plot(df, watershed, variable):\n        df = df[df[\"Watershed\"] == watershed]\n        pivot = df.pivot_table(\n            index=\"Month\",\n            columns=\"Year\",\n            values=variable\n        )\n        ax = pivot.plot(\n            kind=\"line\",\n            marker='o'\n        )\n        ax.set_ylabel(variable)\n        ax.set_xlabel(\"Month\")\n        ax.set_title(f\"{variable} in {watershed} Watershed\")\n        ax.legend(title=\"Year\", bbox_to_anchor=(1.05, 1), loc='upper left')\n        return ax\n    \n    def make_lcc_plot(df, region_name):\n        df = df[df[\"Feature_Name\"] == region_name]\n        pivot = df.pivot_table(\n            index=\"Year\",\n            columns=\"Landcover_Class\",\n            values=\"diff_dev\",\n            fill_value=0\n        )\n        ax = pivot.plot(\n            kind=\"bar\",\n            stacked=True,\n            color=[land_cover_colors.get(c, \"#333333\") for c in pivot.columns]\n        )\n        ax.set_ylabel(\"Difference in km\u00b2 from baseline (2015)\")\n        ax.set_xlabel(\"Year\")\n        ax.set_title(f\"Landcover Change in {region_name}\")\n        ax.legend(title=\"Landcover Class\", bbox_to_anchor=(1.05, 1), loc='upper left')\n        return ax\n    \n    def make_lcc_area_plot(df, region_name):\n        df = df[df[\"Feature_Name\"] == region_name]\n        pivot = df.pivot_table(\n            index=\"Year\",\n            columns=\"Landcover_Class\",\n            values=\"Developable_Area_km2\",\n            aggfunc=\"sum\",\n            fill_value=0\n        )\n        ax = pivot.plot(\n            kind=\"bar\",\n            stacked=True,\n            color=[land_cover_colors.get(c, \"#333333\") for c in pivot.columns]\n        )\n        ax.set_ylabel(\"Developable area in km\u00b2\")\n        ax.set_xlabel(\"Year\")\n        ax.set_title(f\"Landcover Change in {region_name}\")\n        ax.legend(title=\"Landcover Class\", bbox_to_anchor=(1.05, 1), loc='upper left')\n        return ax\n    \n    @reactive.Calc\n    def selected_region_type():\n        \"\"\"Tracks the currently selected region type.\"\"\"\n        return input.region_type()\n\n    @reactive.Calc\n    def selected_dataset():\n        \"\"\"Returns the appropriate dataset based on region type.\"\"\"\n        if selected_region_type() == \"County\":\n            return load_lcc_dataset(\"counties\")\n        elif selected_region_type() == \"VELMA watershed\":\n            return load_lcc_dataset(\"velma\")\n        else:\n            return load_lcc_dataset(\"wrias\")\n\n    @render.plot\n    def plot_lcc():\n        return make_lcc_plot(selected_dataset(), input.region_name())\n    \n    @render.plot\n    def plot_lcc_area():\n        return make_lcc_area_plot(selected_dataset(), input.region_name())\n    \n    ### VELMA Monthly Explorer functions ###\n    @reactive.Calc\n    def hydro_data():\n        file_path = river_files[input.river()]\n        return read_csv_url(file_path)\n\n    @reactive.Calc\n    def hydro_summary():\n        df = hydro_data()\n        var = input.variable()\n        summary = df.groupby(\"Year\")[var].agg([\"min\", \"max\", \"mean\"]).reset_index()\n        return summary\n\n    @render.plot\n    def timeseries_plot():\n        df = hydro_summary()\n        fig, ax = plt.subplots()\n        ax.plot(df[\"Year\"], df[\"mean\"], label=\"Mean\", color=\"blue\")\n        ax.fill_between(df[\"Year\"], df[\"min\"], df[\"max\"], color=\"blue\", alpha=0.2, label=\"Min-Max Range\")\n        ax.set_ylabel(input.variable())\n        ax.set_xlabel(\"Year\")\n        ax.set_title(f\"{input.variable()} in {input.river()} River\")\n        ax.legend()\n        return ax\n\n#this line combines the ui and server to create the app\napp = App(app_ui, server)\n", "type": "text"}, {"name": "Dockerfile", "content": "# Use an official Python runtime as a parent image\nFROM python:3.9-slim-buster\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the requirements file into the container at /app\nCOPY requirements.txt .\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the rest of the application code into the container at /app\nCOPY . .\n\n# Expose the port that Shiny for Python listens on (default is 8000 or 8080)\nEXPOSE 8000\n\n# Command to run the Shiny app\nCMD [\"python\", \"-m\", \"shiny.run\", \"--port\", \"8000\", \"--host\", \"0.0.0.0\", \"app.py\"]", "type": "text"}, {"name": "requirements.txt", "content": "pandas\nmatplotlib\nshiny\n", "type": "text"}]