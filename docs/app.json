[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\n# Define the available data files and mapping\nriver_files = {\n    \"Pullayup\": \"data/Pullayup\",\n    \"Snohomish\": \"data/Snohomish\",\n    \"Green\": \"data/Green\",\n    \"Samish\": \"data/Sammish\",\n    \"Stillaguamish\": \"data/Stillaguamish\",\n    \"Hoko\": \"data/Hoko\",\n    \"Elwha\": \"data/Elwha\",\n    \"Deschutes\": \"data/Deschutes\"\n}\n\n\n# Parse to add river entries\ndef parse_velma_dat(filepath):\n    rivers = {}\n    with open(filepath, \"r\") as f:\n        lines = f.readlines()\n        for line in lines:\n            if \"River,\" in line:\n                # Extract river name (after distribution info, before ', River')\n                parts = line.split(',')\n                if len(parts) >= 4:\n                    river_name = parts[2].strip()\n                    # Use the file path for velma.dat with river name as key\n                    rivers[river_name] = filepath\n    return rivers\n\n# velma_rivers = parse_velma_dat(\"../yr2011_ssm_pnt_wq_velma_T.dat\")\n# river_files.update(velma_rivers)\n\n\n\n# Pre-load column name options from one sample file\nsample_df = pd.read_csv(river_files[\"Pullayup\"])\n# Exclude \"Year\" and \"Day\"\nvariable_options = [col for col in sample_df.columns if col not in (\"Year\", \"Day\", \"Loop\", \"Step\")]\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hydrologic Timeseries Explorer\"),\n    ui.input_select(\"river\", \"Select River Mouth\", choices=list(river_files.keys())),\n    ui.input_select(\"variable\", \"Select Variable\", choices=variable_options),\n\n    ui.output_plot(\"timeseries_plot\", height=\"500px\"),\n    ui.HTML(\n            '<iframe src=\"https://uwt-gis-geotech.maps.arcgis.com/apps/instant/compare/index.html?appid=63ec7e39e0534386b3fdf0d2ee99f558\" width=\"1100\" height=\"600\" frameborder=\"0\" style=\"border:0\" allowfullscreen></iframe>'\n        )\n)\n\ndef server(input, output, session):\n\n    @reactive.Calc\n    def data():\n        file_path = river_files[input.river()]\n        df = pd.read_csv(file_path)\n        return df\n\n    @reactive.Calc\n    def yearly_summary():\n        df = data()\n        var = input.variable()\n        # Group by year and compute min, max, mean\n        summary = (\n            df.groupby(\"Year\")[var]\n            .agg([\"min\", \"max\", \"mean\"])\n            .reset_index()\n        )\n        return summary\n\n    @output\n    @render.plot\n    def timeseries_plot():\n        summary = yearly_summary()\n        plt.figure(figsize=(10, 5))\n        plt.plot(summary[\"Year\"], summary[\"min\"], label=\"Min\", linestyle=\"--\", color=\"blue\")\n        plt.plot(summary[\"Year\"], summary[\"mean\"], label=\"Mean\", linestyle=\"-\", color=\"green\")\n        plt.plot(summary[\"Year\"], summary[\"max\"], label=\"Max\", linestyle=\"--\", color=\"red\")\n        plt.title(f\"Yearly Summary of {input.variable()} at {input.river()}\")\n        plt.xlabel(\"Year\")\n        plt.ylabel(\"Value\")\n        plt.legend()\n        plt.grid(True)\n        plt.tight_layout()\n        return plt.gcf()\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "explore.py", "content": "import pandas as pd \n\n#read in \"../yr2011_ssm_pnt_wq_velma_T.dat\" as a DataFrame\ndata = pd.read_csv(\n    \"../yr2011_ssm_pnt_wq_velma_T.dat\",\n    header=None,\n    skiprows=2,\n    sep=\"!\",\n    engine=\"python\"\n)\ndata = data.map(lambda x: x.strip() if isinstance(x, str) else x)\nprint(data.)", "type": "text"}]
